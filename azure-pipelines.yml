# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pr:
  - master

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  submodules: true

- task: PowerShell@2
  displayName: 'Install dependencies'
  inputs:
    targetType: 'inline'
    script: |
      choco install vulkan-sdk

- task: PowerShell@2
  displayName: 'Install rust'
  inputs:
    targetType: 'inline'
    errorActionPreference: continue
    script: |
      Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile $(Agent.TempDirectory)/rustup-init.exe
      $(Agent.TempDirectory)/rustup-init.exe -y --default-toolchain nightly-msvc
      & rustup default nightly-msvc 2>&1 | %{ "$_" }

- task: PowerShell@2
  displayName: 'Build openpal3'
  inputs:
    targetType: 'inline'
    errorActionPreference: continue
    script: |
      $vulkanSdkVersion = (choco list vulkan-sdk  -lr | Select -Index 1).Split("|") | Select -Index 1
      choco list vulkan-sdk  -lr
      echo $vulkanSdkVersion
      ls C:\VulkanSDK
      $env:Path += ";C:\VulkanSDK\${vulkanSdkVersion}\Bin"
      cd yaobow/yaobow
      & cargo build --release 2>&1 | %{ "$_" }
      cd ../yaobow_editor
      & cargo build --release 2>&1 | %{ "$_" }

- task: CopyFiles@2
  inputs:
    SourceFolder: '.'
    Contents: 'openpal3.toml'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  
- task: CopyFiles@2
  inputs:
    SourceFolder: 'target/release'
    Contents: 'yaobow.exe'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'target/release'
    Contents: 'yaobow_editor.exe'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'yaobow'
    publishLocation: 'Container'
