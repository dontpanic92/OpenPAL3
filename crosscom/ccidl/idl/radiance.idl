module(rust) radiance::comdef;

import crosscom.idl;

[uuid(03748ce3-689d-4325-b1de-59de516b576b)]
interface IComponent: IUnknown {
    void on_loading();
    void on_updating(float delta_sec);
}

[uuid(b875bf54-8c4c-4926-a2bd-6ad6f7038cfe)]
interface IComponentContainer: IUnknown {
    void add_component(UUID uuid, IComponent component);
    IComponent? get_component(UUID uuid);
    IComponent? remove_component(UUID uuid);
}

[uuid(fd2f7f28-c3ea-442c-a6dc-18e370de001a)]
interface IApplication: IComponentContainer {
    void initialize();
    void run();

    [internal(), rust()]
    crosscom::Void set_title(&str title);

    [internal(), rust()]
    std::rc::Rc<std::cell::RefCell<radiance::radiance::CoreRadianceEngine>> engine();
}

[uuid(bd5ad7e2-635d-4bf2-94da-a814d001c811)]
class Application: IApplication {}

[uuid(3afe8052-b675-4939-aafb-2a4fca8f2cf2)]
interface IApplicationLoaderComponent: IComponent {}

[uuid(27e705f1-d035-4e91-8735-3a006fab870d)]
interface IScene: IComponentContainer {
    void load();
    bool visible();
    void update(float delta_sec);

    [internal(), rust()]
    crosscom::Void draw_ui(&mut imgui::Ui ui);

    void unload();
    void add_entity(IEntity entity);

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IEntity>> entities();

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IEntity>> visible_entities();

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IEntity>> root_entities();
    
    [internal(), rust()]
    std::rc::Rc<std::cell::RefCell<radiance::scene::Camera>> camera();
}

[uuid(ce8fc80c-ce9e-4a44-92e5-043c06fef776)]
class Scene: IScene {}

[uuid(95099190-580e-439f-be36-8d1345cf4dec)]
interface IEntity: IComponentContainer {
    [internal(), rust()]
    String name();

    [internal(), rust()]
    crosscom::Void set_name(&str name);

    void load();
    void unload();
    void update(float delta_sec);
    
    [internal(), rust()]
    std::rc::Rc<std::cell::RefCell<radiance::math::Transform>> transform();

    [internal(), rust()]
    radiance::math::Transform world_transform();

    [internal(), rust()]
    crosscom::Void update_world_transform(&radiance::math::Transform parent_transform);

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IEntity>> children();
    
    bool visible();
    void set_visible(bool visible);

    [internal(), rust()]
    Option<std::rc::Rc<radiance::rendering::RenderingComponent>> get_rendering_component();

    [internal(), rust()]
    crosscom::Void set_rendering_component(Option<std::rc::Rc<radiance::rendering::RenderingComponent>> component);

    void attach(IEntity child);
}

[uuid(66d51e1e-3f46-4fe2-a0dc-6183edf7c063)]
class Entity: IEntity {}

[uuid(8dd91852-476b-401b-8668-ba9cc331b7a1)]
interface IStaticMeshComponent: IComponent {}

[uuid(aa9cfbdc-59a2-4e9e-9280-f77d52e79494)]
class StaticMeshComponent: IStaticMeshComponent {}

[uuid(5c56adbc-bc22-4275-b99a-09973a3ffff0)]
interface IAnimatedMeshComponent: IComponent {
    [internal(), rust()]
    radiance::components::mesh::MorphAnimationState morph_animation_state();

    void play(bool replay);
}

[uuid(c1502819-57d7-45d2-a160-13d803e4fc48)]
class AnimatedMeshComponent: IAnimatedMeshComponent {}

[uuid(6dedae32-8339-482e-9f66-c30d557cacb4)]
interface IDirector: IUnknown {
    void activate(ISceneManager scene_manager);

    [internal(), rust()]
    Option<crosscom::ComRc<radiance::comdef::IDirector>> update(
        crosscom::ComRc<radiance::comdef::ISceneManager> scene_manager,
        &imgui::Ui ui,
        f32 delta_sec
    );
}

[uuid(a12c44d5-f5bc-4268-bd00-ab3b6270a829)]
interface ISceneManager: IUnknown {

    [internal(), rust()]
    crosscom::Void update(&imgui::Ui ui, f32 delta_sec);

    IScene? scene();

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IScene>> scenes();

    IDirector? director();
    void set_director(IDirector director);
    void push_scene(IScene scene);
    IScene? pop_scene();
    void unload_all_scenes();
    void unset_director();
}

[uuid(c598eeb6-4ef5-498c-95b7-d06486b69f32)]
class SceneManager: ISceneManager {}

[uuid(cad476ee-990b-4ffe-af1b-02eac152e66e)]
interface IArmatureComponent: IComponent {
    [internal(), rust()]
    crosscom::Void set_animation(Vec<Vec<radiance::components::mesh::skinned_mesh::AnimKeyFrame>> keyframes);

    void clear_animation();

    [internal(), rust()]
    radiance::components::mesh::skinned_mesh::AnimationState animation_state();

    [internal(), rust()]
    Vec<crosscom::ComRc<radiance::comdef::IEntity>> bones();
}

[uuid(6ce422d7-70d9-4986-80ee-e67a53919db1)]
class ArmatureComponent: IArmatureComponent {}

[uuid(19ff0435-8a22-486c-b16a-69c2e1ffd0ae)]
interface ISkinnedMeshComponent: IComponent {}

[uuid(9f536433-8eb3-41da-b4f2-2a7e81c6a0cf)]
class SkinnedMeshComponent: ISkinnedMeshComponent {}

[uuid(1b4b89da-94cb-4dd8-a1e1-493763f14ee3)]
interface IHAnimBoneComponent: IComponent {
    [internal(), rust()]
    crosscom::Void set_keyframes(Vec<radiance::components::mesh::skinned_mesh::AnimKeyFrame> keyframes);

    [internal(), rust()]
    crosscom::Void set_bond_pose(radiance::math::Mat44 matrix);
    
    [internal(), rust()]
    radiance::math::Mat44 bond_pose();
}

[uuid(0fc724de-ae8c-42f1-9543-511c11560903)]
class HAnimBoneComponent: IHAnimBoneComponent {}
